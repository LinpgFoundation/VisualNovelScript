{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Visual Novel Script","text":"<p>Visual Novel Script, short for VNS, is a universal scripting language created with the goal of creating a language that allows visual novel developers to write once and compile everywhere, across different platforms, game libraries, and programming languages.</p> <p>VNS provides a number of features that make it easy to create visual novels, such as:</p> <ul> <li>A simple and easy-to-learn syntax</li> <li>Support for branching dialogue and choices</li> <li>Support for music and sound effects</li> </ul> <p>Unlike Ren'py, writing visual novel script is more like writing a story instead of a program, and the developers also have the choice to create their own implementation.</p>"},{"location":"#how-it-started","title":"How it started:","text":"<p>The development of the VNS can be traced all the way back to the initial stages of Linpg's development. During this period, the team faced the challenge of finding an efficient method to store the dialogue. Each conversation required the storage of multiple variables, including the narrator, the actual dialogue content, associated character images, ambient background music, and various other components:</p> <p></p> <p>Ultimately, the team opted for a design inspired by doubly linked list, but implemented using dictionary (HashMap for Java forks). This approach not only facilitated easier access to the data but also  streamlined the saving process, enabling compatibility with formats like JSON or YAML. This method preserved readability while efficiently  managing the dialogue. Today, the current system closely resembles our initial design, with only a few subtle refinements:</p> <pre><code>compiler: ...\ndialogues:\n  dialog1:\n    head:\n      background_image: bg1.jpg\n      background_music: bgm1.mp3\n      character_images:\n      - alice.png\n      contents:\n      - Hello\n      narrator: Alice\n      next:\n        target: ~01\n        type: default\n      previous: null\n    ~01:\n      background_image: bg1.jpg\n      background_music: bgm1.mp3\n      character_images:\n      - alice.png\n      contents:\n      - Can you hear me?\n      narrator: Alice\n      next:\n        target: ~02\n        type: default\n      previous: head\n    ~02:\n    ...\n  dialog2:\n    ...\n  ...\nid: 1\nlanguage: English\n</code></pre> <p>Although the overall data is easy to read, it is somewhat inconvenient to write. We came up with a dedicated dialogue editor to resolve the issue, but it's still a bit of a hassle. That is the reason why we begin to inquire about the possibility of simplifying the process.</p> <p>Would it be possible to make it feel like we're writing the dialogue in a Microsoft Word document? Thus, VNS is born.</p>"},{"location":"#example","title":"Example:","text":"<p>Here is a simple example of a VNS script:</p> <pre><code>[id]1\n[language]English\n\n[section]dialog_example\n\n[bgi]bg1.png\n[display]character1.png character2.png\n\nMabel:\n- Hello my name is Mabel!\n- How are you doing today!\n\n[hide]character1.png\n\nDipper:\n- Hi Mabel! I'm doing well, thanks for asking.\n</code></pre> <p>This script would display the background image <code>bg1.png</code> and the character images <code>character1.png</code> and <code>character2.png</code>. Mabel would then say \"Hello my name is Mabel!\" and \"How are you doing today!\". Next, <code>character1.png</code> would be hidden and Dipper would say \"Hi Mabel! I'm doing well, thanks for asking.\" Finally, the script would end.</p>"},{"location":"#license","title":"License:","text":"<p>VNS is licensed under LGPL(GNU Lesser General Public License)-2.1-or-later.</p> <p>See LICENSE.</p>"},{"location":"tutorials/basic_tutorial/","title":"Basic Tutorials:","text":""},{"location":"tutorials/basic_tutorial/#the-basics-of-vns","title":"The Basics of VNS","text":"<p>VNS are written in a plain text file with the <code>.vns</code> extension. Imagine a script filled with descriptions, dialogues, and choices. VNS uses special tags to turn this script into an immersive experience, complete with characters, backgrounds, music, and branching narratives.</p>"},{"location":"tutorials/basic_tutorial/#lets-dive-into-the-building-blocks","title":"Let's dive into the building blocks:","text":"<p>1. The tag party:</p> <p>Tags are the secret sauce of VNS. They tell the engine what to display.</p> <p>2. Essential tags:</p> <ul> <li>ID: <code>[id]string</code> defines the ID of the script</li> <li>Language: <code>[language]string</code> specifies the language of the script.</li> <li>Section: <code>[section]string</code> specifies the section of all the following dialogues.</li> <li>Background Image: <code>[bgi]string</code> specifies the background image for the current and following dialogues.</li> <li>Background Music: <code>[bgm]string</code> specifies the background music for the current and following dialogues.</li> <li>Show Character(s): <code>[show]*string(s)</code> introduce the character to the current and following dialogues.</li> </ul> <p>3. A glimpse into storytelling:</p> <p>Imagine this simple scene:</p> <pre><code>[id]1\n[language]English\n[section]dialog_example\n\n[bgm]music1.ogg\n[bgi]bg1.png\n[show]example.png\n\nExample:\n- Hellow world!\n</code></pre> <p>Restult:</p> <pre><code>{\n    \"compiler\": {...},\n    \"dialogues\": {\n        \"dialog_example\": {\n            \"head\": {\n                \"background_image\": \"bg1.png\",\n                \"background_music\": \"music1.ogg\",\n                \"character_images\": [\n                    \"example.png\"\n                ],\n                \"contents\": [\n                    \"Hellow world!\"\n                ],\n                \"narrator\": \"Example\"\n            }\n        }\n    },\n    \"id\": \"1\",\n    \"language\": \"English\"\n}\n</code></pre> <p>See how tags build a scene, introduce characters?</p> <p>Ready to explore more?</p> <p>This is just the beginning! Check out the VNS documentation for in-depth details. Remember, practice makes perfect. Start simple, experiment, and most importantly, have fun creating your unique stories!</p> <p>With dedication and creativity, your journey awaits! Happy storytelling!</p>"},{"location":"tutorials/comments_and_notes/","title":"Comments:","text":"<pre><code>// This is a comment explaining the purpose of the following code block.\n// It helps in understanding the functionality of the script.\n// Comments are essential for readability and maintenance.\n</code></pre> <p>Comments are lines of text in a script that are not executed by the compiler. They are used to annotate the code for better understanding by developers, collaborators, and future maintainers. Comments can include explanations of script logic, TODOs, or any relevant information regarding the script's functionality or design.</p>"},{"location":"tutorials/comments_and_notes/#notes","title":"Notes:","text":"<pre><code># This is a note providing additional information about a specific dialogue.\n# Notes are similar to comments but are intended for specific conversations or reminders.\n# They are retained in the source file and can provide context for future modifications.\n</code></pre> <p>Notes serve a purpose similar to comments but are often more informal and targeted at specific discussions or reminders. They can include explanations, insights, or reminders for developers working on the scripts. Unlike comments, which are typically removed during compilation , notes are retained in the source file to provide ongoing context.</p>"},{"location":"tutorials/dialogues/","title":"Dialogues:","text":"<p>A Dialogue is structured as follows:</p> <pre><code>Character name:\n- Dialogue text\n- Additional dialogue text\n</code></pre> <p>Each dialogue begins with the name of the character speaking, followed by a colon. Subsequently, the dialogue lines are presented with a hyphen and a space at the beginning of each line.</p> <p>This format ensures clarity and consistency in representing conversations within the script. By adhering to this structure, it becomes easier for readers to follow the flow of dialogue and understand who is speaking at any given moment. Additionally, the use of consistent formatting aids in maintaining the script's readability and comprehensibility.</p>"},{"location":"tutorials/dialogues/#example","title":"Example:","text":"<pre><code>Mabel:\n- Hello, my name is Mabel!\n- How are you doing today?\n</code></pre>"},{"location":"tutorials/tags/bgi/","title":"Background image:","text":"<p><code>[bgi]string</code>, ex: <code>[bgi]bg1.png</code></p> <p>Specifies the background image for the current and following dialogues.</p>"},{"location":"tutorials/tags/bgm/","title":"Background music:","text":"<p><code>[bgm]string</code>, ex: <code>[bgm]bgm1.ogg</code></p> <p>Specifies the background music for the current and following dialogues.</p>"},{"location":"tutorials/tags/block/","title":"Block:","text":"<p><code>[block]</code></p> <p>The player can't go back to the previous conversation.</p>"},{"location":"tutorials/tags/display/","title":"Display character(s):","text":"<p><code>[display]*strings</code>, ex: <code>[display]character1.png character2.png</code></p> <p>Displays character images corresponding to the ongoing and forthcoming dialogues. Unlike the [show] tag, which introduces new character images in addition to existing character images, this tag will first clear any existing character images before introducing the designated character image(s).</p>"},{"location":"tutorials/tags/end/","title":"Current dialogue branch ends here:","text":"<p><code>[end]</code></p> <p>Marks the end of current dialogue branch.</p>"},{"location":"tutorials/tags/hide/","title":"Hide character(s):","text":"<p><code>[hide]*strings</code>, ex: <code>[hide]character1.png character2.png</code> or <code>[hide]*</code> for hiding all.</p> <p>Hides the character(s) for the current and following dialogues.</p>"},{"location":"tutorials/tags/id/","title":"ID:","text":"<p><code>[id]string</code>, ex: <code>[id]1</code></p> <p>Specifies a (unique) ID for the current dialogue script file. Every script file must have an ID.</p>"},{"location":"tutorials/tags/label/","title":"Label:","text":"<p><code>[label]string</code>, ex: <code>[label]jump_point1</code></p> <p>Creates a label for the branch command. The value will be used as the key for the subsequent conversation.</p>"},{"location":"tutorials/tags/language/","title":"Language:","text":"<p><code>[language]string</code>, ex: <code>[language]English</code></p> <p>Specifies the language of the current dialogue. Every script file must specifies a language.</p>"},{"location":"tutorials/tags/option/","title":"Option(s):","text":"<p><code>[option]message-&gt;label</code>, ex: <code>[scene]Can you hear me?-&gt;yes_reply</code></p> <p>Adding option(s) to current dialogues, and branch to the specified label according to the option chosen by the player. </p>"},{"location":"tutorials/tags/scene/","title":"New scene:","text":"<p><code>[scene]string</code>, ex: <code>[scene]bg2.png</code></p> <p>Enters a new scene and displays the specified background image.</p>"},{"location":"tutorials/tags/section/","title":"Section:","text":"<p><code>[section]string</code>, ex: <code>[section]dialog_example</code></p> <p>Specifies the section of all the following dialogues.</p>"},{"location":"tutorials/tags/show/","title":"Show character(s):","text":"<p><code>[show]*str</code>, ex: <code>[show]character1.png character2.png</code></p> <p>Introduces character image(s) corresponding to the ongoing and forthcoming dialogues.</p>"}]}